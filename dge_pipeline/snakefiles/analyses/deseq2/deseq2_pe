from os import listdir
from os.path import isfile

def getConditions():
    return set([seqRun['deseq2']['condition'] for seqRun in config['entries'].values()])

localrules: deseq2__create_conditions

DUMP = "analyses/deseq2/deseq2.RData"

rule all:
    input:
        "analyses/deseq2/counts.txt",
        "analyses/deseq2/counts_normalized.txt",
        "analyses/deseq2/deseq2.RData",
        expand('analyses/deseq2/summary/{COND}.xlsx', COND=getConditions()),
        ".report/modules/deseq2.html"

rule summary_tsv_to_xslx:
    input:
        'analyses/deseq2/summary/{COND}.tsv'
    output:
        'analyses/deseq2/summary/{COND}.xlsx'
    conda:
        "../lib/conda_env.yaml"
    params:
        number_conditions = len(getConditions())-1
    group:
        "deseq2"
    shell:
        "python3 lib/deseq2_summary_tsv_to_xlsx.py --tsv {input} --conditions {params.number_conditions} --gff '%%GFF_PATH%%' --identifier '%%GFF_FEATURE_NAME%%' "
        "--feature '%%GFF_FEATURE_TYPE%%' --attributes %%ATTRIBUTE_COLUMNS%% --output {output}"

rule get_possible_annotation_types:
    input:
        annotation="%%GFF_PATH%%"
    output:
        list="analyses/deseq2/annotation_types.txt"
    shell:
        "grep -v '^#' {input.annotation} | awk 'NF {{print $3}}' | sort | uniq -c | sort -n > {output.list}"

rule make_count_tables:
    input:
        annotation="analyses/deseq2/annotation_types.txt",
        mappings=expand("mapping/{A}.bam", A=sorted(config['entries'].keys()))
    output:
        list=directory("analyses/deseq2/count_tables")
    conda:
        "../lib/conda_env.yaml"
    group:
        "count_reads"
    threads:
        1
    log:
        log=directory("analyses/deseq2/logs/count_tables")
    shell:
        "mkdir -p {log.log}; mkdir -p {output.list};"
        "awk 'NF {{print $2}}' {input.annotation} | while read line; do "
        "featureCounts -p -T {threads} %%ADDITIONAL_FEATCOUNTS_OPTIONS%% -t ${{line}} -g '%%GFF_FEATURE_NAME%%' -a %%GFF_PATH%% -o {output.list}/${{line}}.txt {input.mappings} 2>&1 |"
        "tee {log.log}/${{line}}.log; done;"

rule count_reads:
    input:
        "analyses/deseq2/count_tables"
    output:
        counts = "analyses/deseq2/counts.txt",
        summary = "analyses/deseq2/counts.txt.summary"
    params:
        counts_link="count_tables/%%GFF_FEATURE_TYPE%%.txt",
        summary_link="count_tables/%%GFF_FEATURE_TYPE%%.txt.summary",
        counts="analyses/deseq2/count_tables/%%GFF_FEATURE_TYPE%%.txt",
    conda:
        "../lib/conda_env.yaml"
    group:
        "count_reads"
    threads:
        1
    shell:
        "if [ -f '{params.counts}' ]; then ln -s {params.counts_link} {output.counts}; ln -s {params.summary_link} {output.summary}; else echo 'Unknown feature type: %%GFF_FEATURE_TYPE%%'; exit 50; fi"

rule create_conditions:
    output:
        temp("analyses/deseq2/conditions.txt")
    run:
        with(open(output[0], 'w')) as output_file:
            for name in sorted(config['entries'].keys()):
                output_file.write('{}\t{}\n'.format(name, config['entries'][name]['deseq2']['condition']))

rule deseq2_normalize_counts:
    input:
        count_table = "analyses/deseq2/counts.txt",
        conditions = "analyses/deseq2/conditions.txt",
        feature_counts_log = "analyses/deseq2/counts.txt.summary"
    output:
        dump=DUMP,
        correlation_heatmap="analyses/deseq2/correlation_heatmap.pdf",
        counts_normalized="analyses/deseq2/counts_normalized.txt",
        assignment_statistics="analyses/deseq2/counts_assignment.pdf",
    conda:
        "../lib/conda_env.yaml"
    group:
        "deseq2"
    params:
        output_folder="analyses/deseq2/"
    log:
        log="analyses/deseq2/logs/deseq2_normalize_counts.log"
    threads:
        1
    shell:
        "R --vanilla --file=lib/deseq2_analysis_normalize_counts.R --args --threads {threads} --count-table {input.count_table} --conditions {input.conditions} --output-dir {params.output_folder} --r-data {output.dump} "
        "--featcounts-log {input.feature_counts_log} 2>&1 | tee -a {log.log}"

rule deseq2_create_comparison_files:
    input:
        dump = DUMP,
        feature_counts_log = "analyses/deseq2/counts.txt.summary"
    output:
        summary=expand('analyses/deseq2/summary/{COND}.tsv', COND=getConditions()),
        comparisons=directory("analyses/deseq2/deseq2_comparisons")
    conda:
        "../lib/conda_env.yaml"
    group:
        "deseq2"
    params:
        output_folder="analyses/deseq2/"
    log:
        log="analyses/deseq2/logs/deseq2.log"
    threads:
        1
    shell:
        "R --vanilla --file=lib/deseq2_analysis_create_comparison_files_and_summary.R --args --threads {threads} --output {params.output_folder} --r-data {input.dump} "
        "--featcounts-log {input.feature_counts_log} 2>&1 | tee -a {log.log}"

rule generate_report_data:
    input:
        stats="analyses/deseq2/counts.txt.summary",
        comparisons="analyses/deseq2/deseq2_comparisons"
    output:
        deseq2_data=".report/data/deseq2_data.js",
        deseq2_html=".report/modules/deseq2.html",
        deseq2_js=".report/js/modules/deseq2.js"
    conda:
        "../lib/conda_env.yaml"
    group:
        "deseq2_report"
    shell:
        "python3 lib/generate_report_data.py --fc_stats {input.stats} --comparison_dir {input.comparisons} --output {output.deseq2_data} --paired-end && "
        "cp lib/report/deseq2.html {output.deseq2_html} && "
        "cp lib/report/deseq2.js {output.deseq2_js}"
