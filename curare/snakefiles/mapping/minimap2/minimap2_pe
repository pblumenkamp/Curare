from os import listdir
from os.path import isfile, splitext

genome_base_name = "%%GENOME_FASTA%%".rsplit("/", 1)[-1]

def get_reads_file_path(sample, mate):
    if mate == 1:
        gzipped_extension = config['entries'][sample]['main']['forward_reads_gzipped']
    else:
        gzipped_extension = config['entries'][sample]['main']['reverse_reads_gzipped']

    return "preprocessing/{}_R{}.fastq{}".format(sample, mate, ".gz" if gzipped_extension else "")

rule all:
    input:
        "mapping/stats/mapping_stats.xlsx",
        expand("mapping/{A}.bam", A=sorted(config['entries'].keys())),
        ".report/modules/minimap2.html"


rule mapping_stats_xlsx:
    input:
        "mapping/stats/mapping_stats.tsv"
    output:
        xlsx="mapping/stats/mapping_stats.xlsx",
        plot_alignment_absolute="mapping/stats/alignment_stats.svg",
        plot_alignment_relative="mapping/stats/alignment_stats_relative.svg"
    params:
        plot_dir="mapping/stats/"
    conda:
        "../lib/conda_env.yaml"
    group:
        "minimap2_statistics"
    shell:
        "python3 lib/pe_mapping_stats_tsv_to_xlsx.py {input} {output.xlsx} {params.plot_dir}"


rule mapping_stats_tsv:
    input:
        expand("mapping/logs/minimap2_mapping.{name}.log", name=config['entries'].keys())
    output:
        "mapping/stats/mapping_stats.tsv"
    group:
        "minimap2_statistics"
    run:
        tsv = open("mapping/stats/mapping_stats.tsv", "a")
        tsv.write("sample	reads	reads[%]	aligned_conc_0_times	aligned_conc_0_times[%]	aligned_conc_1_time	aligned_conc_1_time[%]	aligned_conc_more_than_1_times	aligned_conc_more_than_1_times[%]	aligned_disconc_1_time	aligned_disconc_1_time[%]	pairs_aligned_0_times_conc_or_disconc	in_mates	mates_aligned_0_times	mates_aligned_0_times[%]	mates_aligned_1_time	mates_aligned_1_time[%]	mates_aligned_more_than_1_times	mates_aligned_more_than_1_times[%]	overall_alignment_rate\n")
        #mates in flagstat info
        #https://github.com/lh3/minimap2/issues/602
        for elem in input:
            f = open(elem, "r")
            sample = elem.split(".log")[0].split("minimap2_mapping.")[1]
            for idx, line in enumerate(f):
                if idx == 10:
                    total = line.split(" ")[0]
                if idx == 16:
                    mapped = line.split(" ")[0]
            tsv.write(f"{sample}	{total}	100	{int(total)-int(mapped)}	{100-int(mapped)/int(total)}	{mapped}	{int(mapped)/int(total)}	0	0	0	0	0	0	0	0	0	0	0	0	{mapped}\n")

rule minimap2_index:
    input:
        genome="%%GENOME_FASTA%%"
    output:
        "mapping/reference/" + genome_base_name + ".mmi"
    conda:
        "../lib/conda_env.yaml"
    group:
        "minimap2_index"
    log:
        "mapping/logs/minimap2_index.log"
    threads:
        8
    shell:
        "minimap2 %%MINIMAP2_PRESET%% %%ADDITIONAL_INDEX_OPTIONS%% -t {threads} -d {output} {input.genome} 2>&1 |"
        "tee {log}"


rule minimap2_mapping:
    input:
	    genome_index="mapping/reference/" + genome_base_name + ".mmi",
	    reads="preprocessing/{sample}_R1.fastq.gz",
	    reads_reverse="preprocessing/{sample}_R2.fastq.gz"
    output:
        temp("mapping/sam/{sample}.sam")
    conda:
        "../lib/conda_env.yaml"
    group:
        "minimap2_mapping"
    log:
        "mapping/logs/minimap2_mapping.{sample}.log"
    threads:
        2
    shell:
        "minimap2 %%MINIMAP2_PRESET%% %%ADDITIONAL_ALIGNMENT_OPTIONS%% -t {threads} -a %%MINIMAP2_PRESET%% {input.genome_index} {input.reads} {input.reads_reverse} 2>&1 > {output} |"
        "tee {log};"
        "samtools flagstat {output} >> {log}"


rule index_bam:
    input:
        "mapping/sam/{sample}.sam"
    output:
        bam="mapping/{sample}.bam",
        bai="mapping/{sample}.bam.bai",
        bam_unmapped="mapping/unmapped/{sample}_unmapped.bam",
        bam_singleton="mapping/singleton/{sample}_singletons.bam",
        bam_disconc="mapping/disconcordantly/{sample}_disconc.bam"
    params:
        tmp_singleton=temp("mapping/singleton/{sample}_tmp.sam")
    conda:
        "../lib/conda_env.yaml"
    group:
        "minimap2_mapping"
    threads:
        2
    shell:
        "samtools view -F 12 -f 2 -Shb {input} | samtools sort -@ {threads} -o {output.bam} - && samtools index {output.bam};"

        "samtools view -f 4 -F 8 -Sh {input} > {params.tmp_singleton} && samtools view -f 8 -F 4 -S {input} >> {params.tmp_singleton} "
        "&& samtools view -Shb {params.tmp_singleton} | samtools sort -@ {threads} -o {output.bam_singleton} - && rm {params.tmp_singleton};"

        "samtools view -F 14 -Shb {input} | samtools sort -@ {threads} -o {output.bam_disconc} -;"

        "samtools view -f 12 -Shb {input} | samtools sort -@ {threads} -o {output.bam_unmapped} -;"


rule write_settings:
    output:
        settings="mapping/settings.yaml"
    conda:
        "../lib/conda_env.yaml"
    group:
        "minimap2_report"
    shell:
        """
        set +e
        m2_version=$(minimap2 --version)
        echo "minimap2_version: \\"$m2_version\\"" >> {output.settings};
        echo "preset: '%%MINIMAP2_PRESET%%'" >> {output.settings};
        echo 'additional_index_parameters: "%%ADDITIONAL_INDEX_OPTIONS%%"' >> {output.settings}; 
        echo 'additional_alignment_parameters: "%%ADDITIONAL_ALIGNMENT_OPTIONS%%"' >> {output.settings}; 
        """


rule generate_report_data:
    input:
        stats_tsv="mapping/stats/mapping_stats.tsv",
        images=["mapping/stats/alignment_stats.svg", "mapping/stats/alignment_stats_relative.svg"],
        settings="mapping/settings.yaml"
    output:
        bw2_data=".report/data/minimap2_data.js",
        bw2_html=".report/modules/minimap2.html",
        bw2_js=".report/js/modules/minimap2.js",
        bw2_css=".report/css/modules/minimap2.css",
        bw2_images=directory(".report/img/modules/minimap2/")
    conda:
        "../lib/conda_env.yaml"
    group:
        "minimap2_report"
    shell:
        "python3 lib/generate_report_data.py --stats {input.stats_tsv} --output {output.bw2_data} --settings {input.settings} --paired-end && "
        "cp lib/report/minimap2.html {output.bw2_html} && "
        "cp lib/report/minimap2.js {output.bw2_js} && "
        "cp lib/report/minimap2.css {output.bw2_css} &&"
        "mkdir -p {output.bw2_images} && cp {input.images} {output.bw2_images}"
